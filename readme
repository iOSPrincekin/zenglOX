该项目仅供学习研究为目的

首先参考官网v0.0.1里的文章搭建交叉编译环境(请使用slackware或ubuntu之类的linux系统)

修改makefile里的GCC_PATH，让其指向你的系统里交叉编译器的bin路径
将makefile里的AS和CC设为对应的汇编器和编译器的名称

在命令行下输入make或make all生成zenglOX.bin

在系统已安装grub2的情况下，make iso生成zenglOX.iso镜像文件

make iso时如果出现grub-mkrescue: xorriso: not found错误，则根据错误提示安装xorriso，
Ubuntu下直接输入apt-get install xorriso(在root权限的情况下)

生成zenglOX.iso镜像文件后，参考官网v0.0.1的文章编译带gdb调试功能的bochs虚拟机

安装好bochs后，修改bochsrc.txt文件，将romimage与vgaromimage的路径值改为你的系统里的路径

在命令行运行./startBochs启动Bochs虚拟机

当Bochs虚拟机在命令行输出显示Waiting for gdb connection on port 1234时，另外再开一个
终端，在该终端里切换到源代码位置，输入类似如下的命令(命令的输出信息仅供参考)：

root@zengl-VirtualBox:/mnt/zenglOX/osdev/zenglOX_v0.0.1# gdb -q zenglOX.bin
Reading symbols from /mnt/zenglOX/osdev/zenglOX_v0.0.1/zenglOX.bin...done.
(gdb) break *_zlox_boot_start
Breakpoint 1 at 0x10000c: file zlox_boot.s, line 18.
(gdb) target remote localhost:1234
Remote debugging using localhost:1234
0x0000fff0 in ?? ()
(gdb) info breakpoints 
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x0010000c zlox_boot.s:18
(gdb) c
Continuing.

Breakpoint 1, _zlox_boot_start () at zlox_boot.s:18
18	  pushl %ebx
(gdb) s
19	  cli
(gdb) s
20	  call zlox_kernel_main
(gdb) s

这样就可以用gdb调试zenglOX的源代码了
